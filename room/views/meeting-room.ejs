<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC Video Conference</title>
    <link rel="icon" type="image/x-icon" href="image-assets/logo-favicon.png">
    <link rel="stylesheet" href="css/style-room.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
</head>

<body>
    <div class="container">
        <div id="form" class="glow">
            <div id="content">
                <div class="left-content">
                    <div class="top-left">
                        <div class="header">
                            <div class="header-div">
                                <span id="power" onclick="leaveMeeting()">
                                    <i class="material-icons">&#xe8ac;</i>
                                </span>
                            </div>
                            <div class="header-div">
                                <p style="margin: 0px; padding: 12px 0px 0px 10px; font-weight: bold;">강의제목</p>
                                <p id="date" style="margin: 0px; padding: 0px 0px 0px 10px; font-size: 10pt;">Sunday, 1
                                    Jan
                                    2023</p>
                            </div>
                        </div>
                    </div>
                    <div class="middle-left">
                        <video id="main-video" title="Double click to display fullscreen." ondblclick="fullscreen()"
                            autoplay></video>
                        <div id="video-grid">

                        </div>
                    </div>
                    <div id="bot-left">
                        <div class="command-btn" id="audioControl" onclick="muteUnmute()">
                            <i class="material-icons">&#xe029;</i>
                            <p class="label">Mic</p>
                        </div>
                        <div class="command-btn" id="videoControl" onclick="playStop()">
                            <i class="material-icons">&#xe04b;</i>
                            <p class="label">Cam</p>
                        </div>
                        <div class="command-btn" id="shareControl" onclick="shareScreen()">
                            <i class="material-icons">&#xe0df;</i>
                            <p class="label" id="shareText">Share</p>
                        </div>
                        <div class="command-btn" id="recordControl" onclick="recordMeeting()">
                            <i class="material-icons">&#xe061;</i>
                            <p class="label">Record</p>
                        </div>
                    </div>
                </div>
                <div id="right-content">
                    <!-- <p style="margin: 15px; padding: 12px 0px 0px 10px; font-weight: bold; color: #202020;">Chat with
                        Friends</p>
                    <div class="active"></div>
                    <div id="info">
                        <p style="color: #ffffff; font-size: 11pt; padding: 10px 0px 0px 12px; ">People in room:</p>
                        <p style="color: #ffffff; font-size: 50pt; padding-left: 120px;" id="participant">4</p>
                        <i class="material-icons"
                            style="color: #ffffff; font-size: 40px; position: relative; bottom: 47px; left: 228px;">&#xe7fd;</i>
                    </div> -->
                    <p id="participant"
                        style="margin: 15px; padding: 12px 0px 0px 10px; font-weight: bold; color: #202020;">Chat with
                        Friends : 4</p>
                    <div class="active"></div>
                    <div id="chatroom">

                    </div>
                    <div id="chatform">
                        <label>
                            <input type="file" id="file" style="display: none;" onchange="selectFile(this.value)">
                            <i class="material-icons"
                                style="font-size: 18px; color: #4f4f4f; float: left; margin-left: 10px; margin-top: 15px; transform: rotate(45deg); cursor: pointer;">&#xe226;</i>
                        </label>
                        <input id="textchat" type="text" placeholder="Type here ...">
                        <button id="sendMessage"
                            style="background-color: #fd6f13; border: none; margin-left: 8px; padding: 4px 3px 2px 3px; margin-top: 8px; border-radius: 6px; cursor: pointer;">
                            <i class="material-icons"
                                style="color: #ffffff; font-size: 25px; font-weight: bold;">&#xe315;</i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('contextmenu', event => event.preventDefault());
        const days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        let day = days[new Date().getDay()];
        let date = new Date().getDate();
        let month = months[new Date().getMonth()];
        let year = new Date().getFullYear();
        document.getElementById("date").innerHTML = day + ", " + date + " " + month + " " + year;

        const ROOM_ID = "<%= roomId %>";
        const USERNAME = "<%= username %>";

        function fullscreen() {
            var mainVideo = document.getElementById("main-video");
            if (mainVideo.requestFullscreen) {
                mainVideo.requestFullscreen();
            }
        }

        var symbol, color;
        symbol = "0123456789ABCDEF";
        color = "#";
        for (var i = 0; i < 6; i++) {
            color = color + symbol[Math.floor(Math.random() * 16)];
        }
        const RANDOM_COLOR = color;
        const videoGrid = document.getElementById('video-grid');
        async function getMedia() {
            try {
                const stream =
                    await navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: true
                    });
                myVideoStream = stream;
                addVideo("my-label-mini-vid", USERNAME, myVideoStream);
                changeMainVideo(stream);
            } catch (err) { }
        }
        getMedia();

        function addVideo(labelMiniVidId, username, stream) {
            const video = document.createElement('video');
            video.className = "vid";
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            })
            video.addEventListener('click', () => {
                changeMainVideo(stream);
            })
            const labelMiniVid = document.createElement('div');
            labelMiniVid.id = labelMiniVidId;
            labelMiniVid.className = "label-mini-vid";
            labelMiniVid.innerHTML = username;
            const miniVid = document.createElement('div');
            miniVid.className = "mini-vid";
            miniVid.append(video);
            miniVid.append(labelMiniVid);
            videoGrid.append(miniVid);

            countUser();
        }

        function countUser() {
            let numb = videoGrid.childElementCount;
            document.getElementById("participant").innerHTML = "접속인원 : " + numb;
        }

        const mainVid = document.getElementById("main-video");
        function changeMainVideo(stream) {
            mainVid.srcObject = stream;
        }

        const socket = io('/');
        var myPeerId;
        var peerList = [];
        var peer = new Peer(undefined, {
            path: '/peerjs',
            host: '/',
            port: '8080'
        });
        peer.on('open', id => {
            socket.emit('join-room', ROOM_ID, id);
            myPeerId = id;
            peerList[id] = USERNAME;
        })

        socket.on('user-connected', (peerId) => {
            connecToOther(peerId, myVideoStream);
        })

        var sharedStream;
        const connecToOther = (peerId, stream) => {
            const call = peer.call(peerId, stream);
            peerList[call.peer] = "";
            var i = 1;
            call.on('stream', userVideoStream => {
                if (i <= 1) {
                    addVideo(call.peer, "", userVideoStream);
                    var conn = peer.connect(peerId);
                    conn.on('open', function () {
                        conn.send(myPeerId + "," + USERNAME);
                    });
                }
                i++;
            })

            if (shareState == 1) {
                const call1 = peer.call(peerId, sharedStream);
            }
        }

        var myVideoStream1;
        peer.on('call', call => {
            navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            }).then(stream => {
                myVideoStream1 = stream;
                call.answer(stream);
                var conn = peer.connect(call.peer);
                conn.on('open', function () {
                    conn.send(myPeerId + "," + USERNAME);
                });
            })

            if (peerList.hasOwnProperty(call.peer) == false) {
                var i = 1;
                call.on('stream', userVideoStream => {
                    if (i <= 1) {
                        addVideo(call.peer, "", userVideoStream);
                    } i++;
                })
                peerList[call.peer] = "";
            } else {
                call.on('stream', userVideoStream => {
                    changeMainVideo(userVideoStream);
                    streamBack = userVideoStream;
                    document.getElementById("shareControl").onclick = getSharedVideo;
                    document.getElementById("shareText").innerHTML = "Back in";
                })
            }
        })

        var peerName;
        peer.on('connection', function (conn) {
            conn.on('data', function (data) {
                var message = data.split(",");
                peerList[message[0]] = message[1];
                document.getElementById(message[0]).innerHTML = message[1];
            });
        });

        function muteUnmute() {
            const enabled = myVideoStream.getAudioTracks()[0].enabled;
            if (enabled) {
                const html = `
            <i class="material-icons">&#xe02b;</i>
            <p class="label">Mic</p>
            `;
                document.getElementById("audioControl").innerHTML = html;
                myVideoStream.getAudioTracks()[0].enabled = false;
                myVideoStream1.getAudioTracks()[0].enabled = false;
            } else {
                const html = `
            <i class="material-icons">&#xe029;</i>
            <p class="label">Mic</p>
            `;
                document.getElementById("audioControl").innerHTML = html;
                myVideoStream.getAudioTracks()[0].enabled = true;
                myVideoStream1.getAudioTracks()[0].enabled = true;
            }
        }

        function playStop() {
            let enabled = myVideoStream.getVideoTracks()[0].enabled;
            if (enabled) {
                myVideoStream.getVideoTracks()[0].enabled = false;
                myVideoStream1.getVideoTracks()[0].enabled = false;
                const html = `
   <i class="material-icons">&#xe04c;</i>
   <p class="label">Cam</p>
 `;
                document.getElementById("videoControl").innerHTML = html;
            } else {
                myVideoStream.getVideoTracks()[0].enabled = true;
                myVideoStream1.getVideoTracks()[0].enabled = true;
                const html = `
   <i class="material-icons">&#xe04b;</i>
  <p class="label">Cam</p>
   `;
                document.getElementById("videoControl").innerHTML = html;
            }
        }

        var shareState = 0;
        var videoTrack;
        var streamBack;
        function shareScreen() {
            if (shareState == 0) {
                startShareScreen();
            } else {
                stopShareScreen();
            }
        }
        function startShareScreen() {
            navigator.mediaDevices.getDisplayMedia({
                video: {
                    cursor: "always"
                },
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true
                }
            }).then((stream) => {
                sharedStream = stream;
                shareState = 1;
                document.getElementById("shareControl").style.color = "#fd6f13";
                var peerToCall = Object.keys(peerList) + "";
                const peerArray = peerToCall.split(",");
                for (var i = 1; i <= peerArray.length; i++) {
                    const call = peer.call(peerArray[i], stream);
                    changeMainVideo(stream);
                }
                videoTrack = stream.getVideoTracks()[0];
                videoTrack.onended = function () {
                    stopShareScreen();
                }
            }).catch((err) => {
                console.log("unable to share screen " + err)
            })
        }
        function stopShareScreen() {
            shareState = 0;
            document.getElementById("shareControl").style.color = "#000000";
            videoTrack.stop();
            changeMainVideo(myVideoStream);
            socket.emit('stop-screen-share', myPeerId);
        }
        socket.on('no-share', (peerId) => {
            changeMainVideo(myVideoStream);
            document.getElementById("shareControl").onclick = shareScreen;
            document.getElementById("shareText").innerHTML = "Share";
        })
        function getSharedVideo() {
            changeMainVideo(streamBack);
        }

        var recordState = 1;
        function recordMeeting() {
            if (recordState == 1) {
                startRecording();
            } else {
                stopRecording();
            }
        }
        let stream = null, audio = null, mixedStream = null, chunks = [], recorder = null;
        async function startRecording() {
            try {
                stream = await navigator.mediaDevices.getDisplayMedia({
                    video: true,
                    audio: true
                });
                audio = await navigator.mediaDevices.getUserMedia({
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        sampleRate: 44100,
                    },
                });
                recordState = 0;
                document.getElementById("recordControl").style.color = "#fd6f13";
            } catch (err) {
                console.error(err)
            }
            if (stream && audio) {
                mixedStream = new MediaStream([...stream.getTracks(), ...audio.getTracks()]);
                recorder = new MediaRecorder(mixedStream);
                recorder.ondataavailable = handleDataAvailable;
                recorder.onstop = handleStop;
                recorder.start(1000);
            }
        }
        function handleDataAvailable(e) {
            chunks.push(e.data);
        }
        function handleStop(e) {
            const blob = new Blob(chunks, { 'type': 'video/mp4' });
            chunks = [];
            stream.getTracks().forEach((track) => track.stop());
            audio.getTracks().forEach((track) => track.stop());
            var element = document.createElement('a');
            element.href = URL.createObjectURL(blob);
            element.download = 'video.mp4';
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }
        function stopRecording() {
            recordState = 1;
            document.getElementById("recordControl").style.color = "#000000";
            recorder.stop();
        }

        let text = $('#textchat');
        $('#textchat').keydown((e) => {
            var hour = new Date().getHours();
            hour = ("0" + hour).slice(-2);
            var minute = new Date().getMinutes();
            minute = ("0" + minute).slice(-2);
            var time = hour + "." + minute;
            if (e.which == 13 && text.val().length !== 0) {
                socket.emit('message', text.val(), USERNAME, RANDOM_COLOR, time);
                text.val('');
            }
        })

        var uploadState = 0;
        $('#sendMessage').click(() => {
            var hour = new Date().getHours();
            hour = ("0" + hour).slice(-2);
            var minute = new Date().getMinutes();
            minute = ("0" + minute).slice(-2);
            var time = hour + "." + minute;
            if (uploadState == 0) {
                socket.emit('message', text.val(), USERNAME, RANDOM_COLOR, time);
                text.val('');
            } else {
                uploadFile();
                const html = '<a href="uploaded-files/' + text.val() + '" target="_blank">' + text.val() + '</a>';
                socket.emit('message', html, USERNAME, RANDOM_COLOR, time);
                text.val('');
            }
        })

        socket.on('createMessage', (message, sender, color, time) => {
            var initial = sender.substring(0, 1);
            $('#chatroom').append(`
<div id="left-chatroom" style="background-color: ${color}">
  <p class="profil">${initial}</p>
 <div class="mini-active"></div>
</div>
<div id="right-chatroom">
 <div id="message">
  <p id="message-user" style="color: #303030; font-weight: bold;">${sender}</p>
  <p id="message-text">${message}</p>
  </div>
</div>
 <p id="time-text" style="font-size:11px; color:#303030; margin-left: 55px; margin-top: 0px; padding-top: 0px; margin-bottom: 12px; color: white;">${time}</p>
 `)
            scrollToBottom();
        })

        function scrollToBottom() {
            let d = $('#chatroom');
            d.scrollTop(d.prop("scrollHeight"));
        }

        function selectFile(val) {
            var filename = val.replace(/C:\\fakepath\\/i, '');
            document.getElementById("textchat").value = filename;
            uploadState = 1;
        }
        function uploadFile() {
            alert("uploading file...");
            uploadState = 0;
            const file = document.getElementById("file");
            const fileReader = new FileReader();
            const theFile = file.files[0];
            fileReader.onload = async (ev) => {
                const chunkCount = Math.floor(ev.target.result.byteLength / (1024 * 1024)) + 1;
                const CHUNK_SIZE = ev.target.result.byteLength / chunkCount;
                const fileName = theFile.name;
                for (let chunkId = 0; chunkId < chunkCount + 1; chunkId++) {
                    const chunk = ev.target.result.slice(chunkId * CHUNK_SIZE, chunkId * CHUNK_SIZE + CHUNK_SIZE)
                    await fetch('/upload', {
                        method: 'POST',
                        headers: {
                            'content-type': 'application/octet-stream',
                            'file-name': fileName,
                            'content-length': chunk.length
                        },
                        body: chunk,
                    })
                }
            }
            fileReader.readAsArrayBuffer(theFile);
            file.value = "";
        }

        function leaveMeeting() {
            let text = "Are you sure?";
            if (confirm(text) == true) {
                socket.emit('leave-meeting', myPeerId, USERNAME);
                peer.disconnect();
                // location.assign("/");
                location.replace("http://localhost:3000/mypage")
            }
        }
        socket.on('user-leave', (peerId, peerName) => {
            alert(peerName + " left the meeting");
            var node = document.getElementById(peerId).parentNode;
            videoGrid.removeChild(node);
            countUser();
        })
    </script>
</body>

</html>